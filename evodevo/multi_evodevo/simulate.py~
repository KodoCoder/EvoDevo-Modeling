# ###Code###
import os
import time
import subprocess
from collections import namedtuple

import pdb

SimulationData = namedtuple('SimulationData', ['fitness'])  #, 'x_pos', 'z_pos'])
# OutputRow = namedtuple('OutputRow', ['fitness', 'original_genome',
#                                      'built_genome'])


def grab_data(data_file):
    """Returns a list of data that was generated by the simulation

    """
    with open(data_file, 'r') as fr:
        lines = [line.strip('\n') for line in fr]
        return SimulationData(*lines)
        # return fr.readline().strip('\n')


def run_simulation(io_file, sim_num, test=False):
    """Returns fitness after running the simulation.

    """
    sim_file = '../c++/app'
    folder_switch = '-f' + io_file
    sim_switch = '-n' + str(sim_num)
    data_file = io_file + 'sim_' + str(sim_num) + '.dat'
    check_file = io_file + 'buffer_' + str(sim_num) + '.dat'
    while not os.path.isfile(check_file):
        time.sleep(0.1)
    if not test:
        subprocess.call([sim_file, folder_switch, sim_switch])
    else:
        subprocess.call([sim_file, folder_switch, sim_switch, '-t'])
    while not os.path.isfile(data_file):
        time.sleep(0.1)
    # fitness = float(grab_data(data_file))
    data = grab_data(data_file)
    fitness = float(data.fitness)
    # if fitness > 1000:

    #     print sim_num, fitness, fitness > 1000
    #     print x_pos, z_pos
    #     pdb.set_trace()
    # print "got fitness from " + str(sim_num)
    os.remove(check_file)
    os.remove(data_file)
    # print "removed junk from " + str(sim_num)
    # return simulation_data.fitness
    return fitness
