
# ### Code ###
import random
from operator import itemgetter

from prepare import add_noise

REPRODUCTION_ERROR_RATE = .005


def select_next_generation(population_list, fitness_list,
                           error_rate=REPRODUCTION_ERROR_RATE):
    """Returns a list of gene-codes the size of the population_list,
        based on the fitness scores provided

    """
    new_population = list()
    selection_spots = int(round(len(population_list) * .5))
    fitness_list = [c for c in enumerate(fitness_list)]
    first_quarter = int(round(selection_spots * .4))
    second_quarter = int(round(selection_spots * 1.))
    third_quarter = int(round(selection_spots * 1.6))
    fourth_quarter = int(round(selection_spots * 2.))
    selected = list()
    for i in xrange(first_quarter):
        agent = max(fitness_list, key=itemgetter(1))
        for i in xrange(4):
            selected.append(agent)
        fitness_list.remove(agent)
    for i in xrange(first_quarter, second_quarter):
        agent = max(fitness_list, key=itemgetter(1))
        for i in xrange(3):
            selected.append(agent)
        fitness_list.remove(agent)
    for i in xrange (second_quarter, third_quarter):
        agent = max(fitness_list, key=itemgetter(1))
        for i in xrange(2):
            selected.append(agent)
        fitness_list.remove(agent)
    for i in xrange (third_quarter, fourth_quarter):
        agent = max(fitness_list, key=itemgetter(1))
        selected.append(agent)
        fitness_list.remove(agent)
    for agent in selected:
        new_population.append(add_noise(agent, error_rate))
    return new_population
