
# ### Code ###
from collections import namedtuple
import copy
import itertools
from more_itertools import peekable

from part import Part, BodyPart, JointPart, NeuronPart, SensorPart, WirePart


Body = namedtuple('Body', ['body_index', 'mounts_used', 'mounts_total',
                           'x_loc', 'y_loc', 'z_loc'])
Joint = namedtuple('Joint', ['joint', 'base_body', 'mounted_body'])
Sensor = namedtuple('Sensor', ['sensor', 'body_index', 'mount_used'])
Neuron = namedtuple('Neuron', ['neuron', 'body_index', 'mount_used'])
Wire = namedtuple('Wire', ['wire', 'from_type', 'from_index', 'to_type', 'to_index'])
Mount = namedtuple('Mount', ['part_index', 'mounts_used', 'mounts_total'])


def iterate_mounts_used(ntuple):
    """Returns given namedtuple with its mounts_used value increased by 1.
    
    """
    return ntuple._replace(mounts_used=ntuple.mounts_used+1)


def get_frame_parts(parts_built):
    """Returns the bodyparts and the jointparts that will be used for the frame

       The returned information also indicates which bodyparts are
       attached to each-other, using which jointparts.

    """
    bodypart_list = [i for i in parts_built 
                     if i.__class__ == BodyPart]
    unused_bodys = [c for c in enumerate(bodypart_list) 
                    if c[1].characteristics.joint_mount_num > 0]
    used_bodys = []
    unused_joints = [c for c in enumerate(parts_built)
                     if c[1].__class__ == JointPart]
    used_joints = []
    # Get first base_part
    if unused_bodys:
        base_part = Body(body_index=unused_bodys[0][0], mounts_used=0,
                         mounts_total=unused_bodys[0][1].characteristics.joint_mount_num,
                         x_loc=0, y_loc=0, z_loc=0)
        used_bodys.append(base_part)
        unused_bodys.pop(0)
        base_pointer = used_bodys[-1].body_index
    else:
        return [used_bodys, used_joints]
    while True:
        # Get next mounted part
        if unused_bodys:
            mounted_part = Body(body_index=unused_bodys[0][0], mounts_used=0,
                                mounts_total=unused_bodys[0][1].characteristics.joint_mount_num,
                                x_loc=0, y_loc=0, z_loc=0)
            used_bodys.append(mounted_part)
            unused_bodys.pop(0)
            mounted_pointer = used_bodys[-1].body_index
        else:
            return [used_bodys, used_joints]
        # Get next joint part
        if unused_joints:
            joint_part = Joint(joint=unused_joints[0][0],
                               base_body=base_pointer,
                               mounted_body=mounted_pointer)
            used_joints.append(joint_part)
            unused_joints.pop(0)
            bi = [i for i in xrange(len(used_bodys))
                  if used_bodys[i].body_index == base_pointer][0]
            print used_bodys, base_pointer
            used_bodys[bi] = iterate_mounts_used(used_bodys[bi])
            used_bodys[-1] = iterate_mounts_used(used_bodys[-1])
            print used_bodys, base_pointer
            base_pointer = mounted_pointer
        else:
            return [used_bodys[:-1], used_joints]
        # Get next base part
        if used_bodys[-1].mounts_used < used_bodys[-1].mounts_total:
            pass
        else:
            for ind, part in enumerate(used_bodys):
                if part.mounts_used < part.mounts_total:
                    base_pointer = used_bodys[ind].body_index
                    break
            else:
                return [used_bodys, used_joints]


def mounts_left(mount_list):
    """Returns true if there are unused mounts left in the given list
    
    """
    return any([part.mounts_used < part.mounts_total
                for part in mount_list])


def get_sensor_parts(parts_built, frame_parts):
    """Returns the sensors to be used in the robots ANN.
    
    """
    unused_sensors = [c for c in enumerate(parts_built)
                      if c[1].__class__ == SensorPart]
    used_sensors = []
    body_list = [i for i in parts_built
                 if (i.__class__ == BodyPart and
                     i.characteristics.joint_mount_num > 0]
    sensor_mounts = [Mount(part_index=part.body_index, 
                           mounts_used=0,
                           mounts_total=body_list[part.body_index].characteristics.sensor_mount_num)
                     for part in frame_parts[0]]
    for i in itertools.cycle(range(len(sensor_mounts))):
        if unused_sensors and mounts_left(sensor_mounts):
            sensor_part = Sensor(sensor=unused_sensors[0][0], 
                                 body_index=sensor_mounts[i].part_index,
                                 mount_used=sensor_mounts[i].mounts_used)
            used_sensors.append(sensor_part)
            unused_sensors.pop(0)  # I think I just need a range(#ofSensorParts)
            sensor_mounts[i] = iterate_mounts_used(sensor_mounts[i])
        else:
            return used_sensors


def get_neuron_parts(parts_built, frame_parts):
    """Returns the neurons to be used in the robots ANN.

    """
    unused_neurons = [c for c in enumerate(parts_built)
                      if c[1].__class__ == NeuronPart]
    used_neurons = []
    body_list = [i for i in parts_built
                 if (i.__class__ == BodyPart and
                     i.characteristics.joint_mount_num > 0]
    neuron_mounts = [Mount(part_index=part.body_index,
                           mounts_used=0,
                           mounts_total=body_list[part.body_index].characteristics.neuron_mount_num)
                     for part in frame_parts[0]]
    for i in itertools.cycle(range(len(neuron_mounts))):
        if unused_neurons and mounts_left(neuron_mounts):
            neuron_part = Neuron(neuron=unused_neurons[0][0],
                                 body_index=neuron_mounts[i].part_index,
                                 mount_used=neuron_mounts[i].mounts_used)
            used_neurons.append(neuron_part)
            unused_neurons.pop(0)   # I think I just need a range(#ofNeuronParts)
            neuron_mounts[i] = iterate_mounts_used(neuron_mounts[i])
        else:
            return used_neurons


def make_wire_part(part, case, generators):
    """Returns a Wire namedtuple; a wire part to be used.

    """
    if case == 'S->J':
        return Wire(wire=part[0],
                    from_type=SensorPart,
                    from_index=generators[3].next(),
                    to_type=JointPart,
                    to_index=generators[0].next())
    elif case == 'S->N':
        return Wire(wire=part[0],
                    from_type=SensorPart,
                    from_index=generators[3].next(),
                    to_type=NeuronPart,
                    to_index=generators[1].next())
    elif case == 'N->J':
        return Wire(wire=part[0],
                    from_type=NeuronPart,
                    from_index=generators[2].next(),
                    to_type=JointPart,
                    to_index=generators[0].next())
    elif case == 'N->N':
        return Wire(wire=part[0],
                    from_type=NeuronPart,
                    from_index=generators[2].next(),
                    to_type=JointPart,
                    to_index=generators[1].next())
    else:
        raise ValueError


def get_wire_parts(parts_built, frame_parts, neuron_parts, sensor_parts):
    """Returns the set of wires to be used in bulding the robot.

    """
    unused_wires = [c for c in enumerate(parts_built)
                    if c[1].__class__ == WirePart]
    used_wires = []
    joint_list = [i for i in parts_built
                  if i.__class__ == JointPart]
    neuron_list = [i for i in parts_built
                   if i.__class__ == NeuronPart]
    sensor_list = [i for i in parts_built
                   if i.__class__ == SensorPart]
    # Create mount information holders
    joint_ins = [Mount(part_index=part.joint, 
                       mounts_used=0,
                       mounts_total=joint_list[part.joint].characteristics.input_num)
                 for part in frame_parts[1]]
    neuron_ins = [Mount(part_index=part.neuron,
                        mounts_used=0,
                        mounts_total=neuron_list[part.neuron].characteristics.input_num)
                  for part in neuron_parts]
    neuron_outs = [Mount(part_index=part.neuron,
                         mounts_used=0,
                         mounts_total=neuron_list[part.neuron].characteristics.output_num)
                   for part in neuron_parts]
    sensor_outs = [Mount(part_index=part.sensor,
                         mounts_used=0,
                         mounts_total=sensor_list[part.sensor].characteristics.output_num)
                   for part in sensor_parts]
    # Create generators to help iterate through the mount information holders
    joint_in_generator = peekable(itertools.cycle(range(len(joint_ins))))
    neuron_in_generator = peekable(itertools.cycle(range(len(neuron_ins))))
    neuron_out_generator = peekable(itertools.cycle(range(len(neuron_outs))))
    sensor_out_generator = peekable(itertools.cycle(range(len(sensor_outs))))
    generator_list = [joint_in_generator, neuron_in_generator,
                      neuron_out_generator, sensor_out_generator]
    from_sensor = True
    # Create wires
    for part in unused_wires:
        if ((mounts_left(joint_ins) or mounts_left(neuron_ins)) and
            (mounts_left(neurons_outs) or mounts_left(sensor_outs))):
            if part.characteristics.direct:
                if from_sensor:
                    if mounts_left(sensor_outs):
                        ind = sensor_out_generator.peek()
                        sensor_outs[ind] = iterate_mounts_used(sensor_outs[ind])
                        if mounts_left(joint_ins):
                            ind = joint_in_generator.peek()
                            joint_ins[ind] = iterate_mounts_used(joint_ins[ind])
                            wire_part = make_wire_part(part, 'S->J', generator_list)
                            from_sensor = False
                            used_wires.append(wire_part)
                        else:
                            ind = neuron_in_generator.peek()
                            neuron_ins[ind] = iterate_mounts_used(neuron_ins[ind])
                            wire_part = make_wire_part(part, 'S->N', generator_list)
                            from_sensor = False
                            used_wires.append(wire_part)
                    else:
                        ind = neuron_out_generator.peek()
                        neuron_outs[ind] = iterate_mounts_used(neuron_outs[ind])
                        if mounts_left(joint_ins):
                            ind = joint_in_generator.peek()
                            joint_ins[ind] = iterate_mounts_used(joint_ins[ind])
                            wire_part = make_wire_part(part, 'N->J', generator_list)
                            from_sensor = False
                            used_wires.append(wire_part)
                        else:
                            ind = neuron_in_generator.peek()
                            neuron_ins[ind] = iterate_mounts_used(neuron_ins[ind])
                            wire_part = make_wire_part(part, 'N->N', generator_list)
                            from_sensor = False
                            used_wires.append(wire_part)
                else:
                    if mounts_left(neurons_outs):
                        ind = neuron_onut_generator.peek()
                        neuron_outs[ind] = iterate_mounts_used(neuron_outs[ind])
                        if mounts_left(joint_ins):
                            ind = joint_in_generator.peek()
                            joint_ins[ind] = iterate_mounts_used(joint_ins[ind])
                            wire_part = make_wire_part(part, 'N->J', generator_list)
                            from_sensor = True
                            used_wires.append(wire_part)
                        else:
                            ind = neuron_in_generator.peek()
                            neuron_ins[ind] = iterate_mounts_used(neuron_ins[ind])
                            wire_part = make_wire_part(part, 'N->N', generator_list)
                            from_sensor = True
                            used_wires.append(wire_part)
                    else:
                        ind = sensor_out_generator.peek()
                        sensor_outs[ind] = iterate_mounts_used(sensor_outs[ind])
                        if mounts_left(joint_ins):
                            ind = joint_in_generator.peek()
                            joint_ins[ind] = iterate_mounts_used(joint_ins[ind])
                            wire_part = make_wire_part(part, 'S->J', generator_list)
                            from_sensor = True
                            used_wires.append(wire_part)
                        else:
                            ind = neuron_in_generator.peek()
                            neuron_ins[ind] = iterate_mounts_used(neuron_ins[ind])
                            wire_part = make_wire_part(part, 'S->N', generator_list)
                            from_sensor = True
                            used_wires.append(wire_part)
            else:
                if from_sensor:
                    if mounts_left(sensor_outs):
                        ind = sensor_out_generator.peek()
                        sensor_outs[ind] = iterate_mounts_used(sensor_outs[ind])
                        if mounts_left(neuron_ins):
                            ind = neuron_in_generator.peek()
                            neuron_ins[ind] = iterate_mounts_used(neuron_ins[ind])
                            wire_part = make_wire_part(part, 'S->N', generator_list)
                            from_sensor = False
                            used_wires.append(wire_part)
                        else:
                            ind = joint_in_generator.peek()
                            joint_ins[ind] = iterate_mounts_used(joint_ins[ind])
                            wire_part = make_wire_part(part, 'S->J', generator_list)
                            from_sensor = False
                            used_wires.append(wire_part)
                    else:
                        ind = neuron_out_generator.peek()
                        neuron_outs[ind] = iterate_mounts_used(neuron_outs[ind])
                        if mounts_left(neuron_ins):
                            ind = neuron_in_generator.peek()
                            neuron_ins[ind] = iterate_mounts_used(neuron_ins[ind])
                            wire_part = make_wire_part(part, 'N->N', generator_list)
                            from_sensor = False
                            used_wires.append(wire_part)
                        else:
                            ind = joint_in_generator.peek()
                            joint_ins[ind] = iterate_mounts_used(joint_ins[ind])
                            wire_part = make_wire_part(part, 'N->J', generator_list)
                            from_sensor = False
                            used_wires.append(wire_part)
                else:
                    if mounts_left(neurons_outs):
                        ind = neuron_out_generator.peek()
                        neuron_outs[ind] = iterate_mounts_used(neuron_outs[ind])
                        if mounts_left(neuron_ins):
                            ind = neuron_in_generator.peek()
                            neuron_ins[ind] = iterate_mounts_used(neuron_ins[ind])
                            wire_part = make_wire_part(part, 'N->N', generator_list)
                            from_sensor = True
                            used_wires.append(wire_part)
                        else:
                            ind = joint_in_generator.peek()
                            joint_ins[ind] = iterate_mounts_used(joint_ins[ind])
                            wire_part = make_wire_part(part, 'N->J', generator_list)
                            from_sensor = True
                            used_wires.append(wire_part)
                    else:
                        ind = sensor_out_generator.peek()
                        sensor_outs[ind] = iterate_mounts_used(sensor_outs[ind])
                        if mounts_left(neuron_ins):
                            ind = neuron_in_generator.peek()
                            neuron_ins[ind] = iterate_mounts_used(neuron_ins[ind])
                            wire_part = make_wire_part(part, 'S->N', generator_list)
                            from_sensor = True
                            used_wires.append(wire_part)
                        else:
                            ind = joint_in_generator.peek()
                            joint_ins[ind] = iterate_mounts_used(joint_ins[ind])
                            wire_part = make_wire_part(part, 'S->J', generator_list)
                            from_sensor = True
                            used_wires.append(wire_part)
        else:
            return used_wires
    return used_wires


def get_ann_parts(parts_built, frame_parts):
    neuron_parts = get_neuron_parts(parts_built, frame_parts)
    sensor_parts = get_sensor_parts(parts_built, frame_parts)
    wire_parts = get_wire_parts(parts_built, frame_parts,
                                neuron_parts, sensor_parts)
    return [neuron_parts, sensor_parts, wire_parts]


def get_all_parts(parts_built):
    frame_parts = get_frame_parts(parts_built)
    ann_parts = get_ann_parts(parts_built, frame_parts)
    return [frame_parts[0], frame_parts[0], ann_parts[0],
            ann_parts[1], ann_parts[2]]
