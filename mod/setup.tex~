% Created 2015-09-16 Wed 12:35
\documentclass[11pt]{article}
\usepackage[AUTO]{inputenc}
\usepackage[T1]{fontenc}
\usepackage{fixltx2e}
\usepackage{graphicx}
\usepackage{longtable}
\usepackage{float}
\usepackage{wrapfig}
\usepackage{soul}
\usepackage{textcomp}
\usepackage{marvosym}
\usepackage{wasysym}
\usepackage{latexsym}
\usepackage{amssymb}
\usepackage{hyperref}
\tolerance=1000
\providecommand{\alert}[1]{\textbf{#1}}

\title{setup}
\author{Joshua Hawthorne-Madell}
\date{\today}
\hypersetup{
  pdfkeywords={},
  pdfsubject={},
  pdfcreator={Emacs Org-mode version 7.9.3f}}

\begin{document}

\maketitle

\setcounter{tocdepth}{3}
\tableofcontents
\vspace*{1cm}
\section{Setup Agent}
\label{sec-1}
\subsection{Purpose}
\label{sec-1-1}

\begin{itemize}
\item This code takes a genome from the germ$_{\mathrm{genome}}$ list, parses it into
  gene-sequences, and then initiates those sequences as proto-parts
\end{itemize}
\subsection{Use}
\label{sec-1-2}

\begin{itemize}
\item During the development phase, this function bridges the gap between
  parsing and updating.
\end{itemize}
\section{Code}
\label{sec-2}


\begin{verbatim}
### Code ###

from part import Part, BodyPart, JointPart, NeuronPart, SensorPart, WirePart

sequence_list = []
parts_developing = []


def sequence_parser(gene_code):
    """Takes a genome and splits it into gene_sequences.

    Fills up the global variable sequence_list."""
    global sequence_list
    start_, stop_ind, started = 0, 0, False
    sequence_list = []   # make sure you start_ with empty list!
    for i in range(0, len(gene_code), 3):
        triplet = gene_code[i:i+3]
        cur_codon = table[triplet]
        if (cur_codon == 'START' and not started):
            start_ind = i
            started = True
        elif (cur_codon == 'STOP' and started):
            stop_ind = i+3
            sequence_list.append(gene_code[start_ind:stop_ind])
            started = False


def setup_part(part):
    """Takes part and creates proper subclass object"""
    global parts_developing
    if part.__class__ == Part:
        for i in range(0, len(part.gene_sequence), 3):
            cur_codon = table[part.gene_sequence[i:i+3]]
            if cur_codon == 'BP_SPHERE':
                parts_developing.append(BodyPart(part.gene_sequence))
                break
            elif cur_codon == 'SP_TOUCH':
                parts_developing.append(SensorPart(part.gene_sequence))
                break
            elif cur_codon == 'JP_HINGE':
                parts_developing.append(JointPart(part.gene_sequence))
                break
            elif cur_codon == 'WP_WIRE':
                parts_developing.append(WirePart(part.gene_sequence))
                break
            elif cur_codon == 'NP_NEURON':
                parts_developing.append(NeuronPart(part.gene_sequence))
                break
            elif i+3 == len(part.gene_sequence):
                break
    else:
        raise TypeError('Only the base Part class can use this!')


def setup_agent(gene_code):
    global sequence_list, parts_developing
    for i in sequence_list:
        pt = Part(gene_code)
        setup_part(pt)
    for i in parts_developing:
        i.calculate_capacity()
        i.count_regulators()
        i.init_codons()
\end{verbatim}

\end{document}
