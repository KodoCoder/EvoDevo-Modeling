% Created 2015-09-16 Wed 01:23
\documentclass[11pt]{article}
\usepackage[utf8]{inputenc}
\usepackage[T1]{fontenc}
\usepackage{fixltx2e}
\usepackage{graphicx}
\usepackage{longtable}
\usepackage{float}
\usepackage{wrapfig}
\usepackage{soul}
\usepackage{textcomp}
\usepackage{marvosym}
\usepackage{wasysym}
\usepackage{latexsym}
\usepackage{amssymb}
\usepackage{hyperref}
\tolerance=1000
\providecommand{\alert}[1]{\textbf{#1}}

\title{generate}
\author{Josh}
\date{\today}
\hypersetup{
  pdfkeywords={},
  pdfsubject={},
  pdfcreator={Emacs Org-mode version 7.9.3f}}

\begin{document}

\maketitle

\setcounter{tocdepth}{3}
\tableofcontents
\vspace*{1cm}
\section{Generate Population}
\label{sec-1}
\subsection{Purpose}
\label{sec-1-1}

\begin{itemize}
\item This code creates \textbf{n} genomes.  A genome has \textbf{c} characters, 18000
  for the current project.  Each character is a digit from 0 to 3.
\end{itemize}
\subsection{Use}
\label{sec-1-2}

\begin{itemize}
\item This code will be used to create a list of genomes that define a
  population of agents.  This code will only be used once per
  population per experiment, because the following populations are
  created via the selection and reproduction functions.
\item The genomes, one at a time, will be parsed into sequences, the
  sequences will be developed into parts, the parts will be combined
  into an agent, and then the blueprint for the agent will be piped to
  the C++ Bullet Physics code to be created and ``live'' its life.
\end{itemize}
\section{Code}
\label{sec-2}


\begin{verbatim}
germ_genomes = []
soma_genomes = []

import copy
import random


def generate(c, n):
    global germ_genomes, soma_genomes
    for i in range(n):
        germ_genomes[i] = ''
        for j in range(c):
            germ_genomes[i] += str(random.randrange(0, 4))
        soma_genomes[i] = copy.deepcopy(germ_genomes[i])
\end{verbatim}
\section{Tests}
\label{sec-3}


\begin{verbatim}
import generate

def length():
    """Tests that germ_genomes and soma_genomes are the right length"""
    global germ_genomes, soma_genomes
    assert len(germ_genomes) == len(soma_genomes)
    for i in range(len(germ_genomes)):
        assert len(germ_genomes[i]) == 18000
        assert len(soma_genomes[i]) == 18000
    print "Length test passed"


def tethered():
    """Tests that germ_genomes and soma_genomes are equal and independent"""
    global germ_genomes, soma_genomes
    assert germ_genomes == soma_genomes
    for i in germ_genomes:
        germ_genomes[i][0] = 'F'
    for i in range(len(germ_genomes)):
        assert germ_genomes != soma_genomes
    print "Tethered test passed"


if __name__ == "__main__":
    generate(18000, 60)
    length()
    tethered()
\end{verbatim}

\end{document}
